name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: 
      - develop  # Dev01/Dev02 → develop をキャッチ
      - main     # develop → main をキャッチ
  pull_request_review_comment:
    types: [created]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref || github.sha }}-${{ github.workflow }}-${{ github.event_name == 'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # ベースブランチが develop/main のみ実行
    if: |
      contains(fromJson('["develop", "main"]'), github.base_ref) ||
      github.event_name == 'pull_request_review_comment'
    steps:
      - uses: coderabbitai/openai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: true
          review_comment_lgtm: false
          openai_light_model: gpt-4.1-nano 
          openai_heavy_model: o3-mini
          openai_timeout_ms: 900000
          language: ja-JP
          openai_language: ja-JP
          max_files: 10
          path_filters: |
            !db/**
            !**/*.lock
            !**/node_modules/**
            !**/vendor/**
            !**/*.min.js
            !**/*.min.css
            !**/dist/**
            !**/build/**
            !**/*.generated.*
            !**/coverage/**
            !**/.next/**
          system_message: |
            **重要: 必ず日本語で回答してください。英語での回答は絶対に禁止です。**
            
            あなたは @coderabbitai で、経験豊富なシニアソフトウェアエンジニアとして機能します。
            
            ## レビューの重点項目（優先度順）
            1. **セキュリティ**: 脆弱性、認証・認可の問題、入力値検証
            2. **ロジック**: アルゴリズムの正確性、エッジケースの処理
            3. **パフォーマンス**: 計算量、メモリ使用量、データベースクエリ効率
            4. **保守性**: コードの可読性、関数の単一責任、モジュール化
            5. **エラーハンドリング**: 例外処理、エラーメッセージの適切性
            6. **データ競合**: 並行処理での安全性、デッドロック回避
            7. **ベストプラクティス**: DRY、SOLID、KISS原則の遵守
            
            ## レビュー方針
            - **建設的なフィードバック**: 問題点だけでなく、具体的な改善案を提示
            - **ポジティブな評価**: 良い実装については積極的に評価
            - **教育的観点**: なぜその変更が必要かを説明
            - **優先度の明示**: 重要度に応じて「重要」「推奨」「提案」のラベルを使用
            
            ## 除外項目
            - コードフォーマット（リンターで対応可能な項目）
            - 単純なタイポ
            - 個人的なスタイルの好み
            
            ## コメント形式
            各指摘には以下を含めてください：
            1. 問題の説明
            2. 具体的な改善案
            3. 理由・根拠
            4. 優先度（重要/推奨/提案）
          
          summarize: |
            **日本語で回答してください。**
            
            以下の形式でmarkdownを使用して要約を提供してください：
            
            ## 📊 レビュー概要
            
            ### 🔍 ウォークスルー
            全体的な変更内容の要約（80語以内）
            
            ### 📈 品質評価
            - **セキュリティ**: [評価とコメント]
            - **パフォーマンス**: [評価とコメント]  
            - **保守性**: [評価とコメント]
            
            ### 📝 変更ファイル一覧
            | ファイル | 変更概要 | 重要度 |
            |---------|---------|--------|
            | file1.js | 機能追加 | 🔴 重要 |
            | file2.py | リファクタリング | 🟡 推奨 |
            
            ### ✅ 良い点
            - [ポジティブなフィードバック]
            
            ### ⚠️ 改善点
            - [重要な改善点]
            
            追加のコメントは避けてください。
          
          summarize_release_notes: |
            **日本語で回答してください。**
            
            このプルリクエストのリリースノートを以下の形式で作成してください：
            
            ## 🚀 リリースノート
            
            ### ✨ 新機能
            - [新機能の説明]
            
            ### 🐛 バグ修正  
            - [修正内容]
            
            ### 🔧 改善・リファクタリング
            - [改善内容]
            
            ### 📚 ドキュメント
            - [ドキュメント更新]
            
            ### 🧪 テスト
            - [テスト追加・修正]
            
            ### 🔨 その他
            - [その他の変更]
            
            50-100語以内で簡潔に記述してください。
