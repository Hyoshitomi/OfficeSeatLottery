// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 座席テーブル
model M_SEAT {
  seatId     String @id
  tableId    String
  seatNumber Int
  status     Int
  imageX     Int
  imageY     Int

  seatAppointments M_SEAT_APPOINT[]
  seatPositions    T_SEAT_POSITION[] @relation("SeatToSeatPosition")

  @@index([status])
  @@index([tableId])
}

// 予約座席テーブル
model M_SEAT_APPOINT {
  id        Int       @id @default(autoincrement())
  appointId Int
  seatId    String
  userId    Int
  startDate DateTime
  endDate   DateTime
  created   DateTime
  updated   DateTime?

  seat M_SEAT @relation(fields: [seatId], references: [seatId])
  user M_USER @relation(fields: [userId], references: [userId])

  @@index([seatId])
  @@index([userId])
}

// 座席抽選結果
model T_SEAT_POSITION {
  id      Int       @id @default(autoincrement())
  date    DateTime
  seatId  String
  userId  Int
  created DateTime
  updated DateTime?

  seat M_SEAT @relation("SeatToSeatPosition", fields: [seatId], references: [seatId])
  user M_USER @relation("UserToSeatPosition", fields: [userId], references: [userId])

  @@unique([date, userId])
  @@index([date])
  @@index([seatId])
  @@index([userId])
}

// ユーザー情報
model M_USER {
  userId         Int     @id @default(autoincrement())
  employeeNumber String  @unique
  lastName       String
  firstName      String
  showName       String?
  password       String
  adminFlag      Boolean
  deleteFlag     Boolean
  insideFlag     Boolean

  seatAppointments M_SEAT_APPOINT[]
  seatPositions    T_SEAT_POSITION[] @relation("UserToSeatPosition")

  @@index([employeeNumber])
}
